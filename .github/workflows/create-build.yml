name: Create PromptQL Build

on:
  pull_request:
    types: [opened, synchronize, reopened]
    paths:
      - "pql/**"

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Load secrets from 1Password
        uses: 1password/load-secrets-action@v1
        with:
          export-env: true
        env:
          OP_SERVICE_ACCOUNT_TOKEN: ${{ secrets.OP_SERVICE_ACCOUNT_TOKEN }}
          HASURA_DDN_PAT: "op://Product ACT/pql-docs-bot/hasura-ddn-pat"
          ANTHROPIC_KEY: "op://Product ACT/pql-docs-bot/anthropic-api-key"
          APP_PG_JDBC_URL: "op://Product ACT/pql-docs-bot/postgres-jdbc-url"
          APP_PG_JDBC_SCHEMAS: "op://Product ACT/pql-docs-bot/postgres-jdbc-schemas"

      - name: Install DDN CLI
        run: |
          curl -L https://graphql-engine-cdn.hasura.io/ddn/cli/v4/get.sh | bash
          echo "$HOME/.local/bin" >> $GITHUB_PATH

      - name: Verify DDN CLI installation
        run: ddn --version

      - name: Authenticate with Hasura DDN
        run: |
          cd pql
          ddn auth login --pat "$HASURA_DDN_PAT"

      - name: Create temp .env.cloud file
        run: |
          cd pql
          cat > .env.cloud << EOF
          HASURA_DDN_PAT=$HASURA_DDN_PAT
          ANTHROPIC_KEY=$ANTHROPIC_KEY
          APP_PG_JDBC_URL=$APP_PG_JDBC_URL
          APP_PG_JDBC_SCHEMAS=$APP_PG_JDBC_SCHEMAS
          EOF

      - name: Create DDN build
        id: build
        run: |
          cd pql
          BUILD_OUTPUT=$(ddn supergraph build create --out json -d "PR #${{ github.event.number }}: ${{ github.event.pull_request.title }}")
          echo "build_output<<EOF" >> $GITHUB_OUTPUT
          echo "$BUILD_OUTPUT" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT

      - name: Comment on PR
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const buildOutput = JSON.parse(`${{ steps.build.outputs.build_output }}`);

            const comment = `## ðŸš€ PromptQL Build Complete

            **Build Version:** \`${buildOutput.build_version || 'N/A'}\`
            **Project:** \`${buildOutput.project_name || 'pql-docs'}\`
            **PromptQL Playground:** ${buildOutput.promptql_url ? `[Open Playground](${buildOutput.promptql_url})` : 'N/A'}

            ${buildOutput.description ? `\n**Description:** ${buildOutput.description}` : ''}
            `;

            // Find existing comment
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            const existingComment = comments.data.find(comment => 
              comment.body.includes('ðŸš€ PromptQL Build Complete')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                comment_id: existingComment.id,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: comment
              });
            }

      - name: Notify Slack
        if: always()
        uses: actions/github-script@v7
        env:
          SLACK_BOT_TOKEN: ${{ secrets.SLACK_BOT_TOKEN }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
        with:
          script: |
            const buildOutput = JSON.parse(`${{ steps.build.outputs.build_output }}`);

            console.log('Environment check:');
            console.log('SLACK_BOT_TOKEN exists:', !!process.env.SLACK_BOT_TOKEN);
            console.log('SLACK_CHANNEL_ID:', process.env.SLACK_CHANNEL_ID);

            const slackMessage = `ðŸš€ *PromptQL Build Complete*

            *Build Version:* \`${buildOutput.build_version || 'N/A'}\`
            *Project:* \`${buildOutput.project_name || 'pql-docs'}\`
            *PromptQL Playground:* ${buildOutput.promptql_url ? buildOutput.promptql_url : 'N/A'}

            ${buildOutput.description ? `*Description:* ${buildOutput.description}` : ''}`;

            // Check if thread exists in PR metadata
            const comments = await github.rest.issues.listComments({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
            });

            let threadTs = null;
            const threadComment = comments.data.find(comment => 
              comment.body.includes('<!-- slack-thread-ts:')
            );

            if (threadComment) {
              const match = threadComment.body.match(/<!-- slack-thread-ts:([^-]+) -->/);
              threadTs = match ? match[1] : null;
              console.log('Found existing thread:', threadTs);
            }

            if (!threadTs) {
              console.log('Creating new Slack thread...');
              const prAuthor = context.payload.pull_request.user.login;
              const prTitle = context.payload.pull_request.title;
              const prNumber = context.payload.pull_request.number;
              
              const initialMessage = `@${prAuthor} opened a PR Â»\n\n#${prNumber} ${prTitle}`;
              
              const response = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  channel: process.env.SLACK_CHANNEL_ID,
                  text: initialMessage,
                }),
              });

              const slackData = await response.json();
              console.log('Slack thread response:', JSON.stringify(slackData, null, 2));

              if (!slackData.ok) {
                console.error('Failed to create Slack thread:', slackData.error);
                return;
              }

              threadTs = slackData.ts;

              // Store thread timestamp in PR comment
              await github.rest.issues.createComment({
                issue_number: context.issue.number,
                owner: context.repo.owner,
                repo: context.repo.repo,
                body: `<!-- slack-thread-ts:${threadTs} -->`
              });
            }

            // Only post to thread if we have a valid threadTs
            if (threadTs) {
              console.log('Posting build info to thread:', threadTs);
              const buildResponse = await fetch('https://slack.com/api/chat.postMessage', {
                method: 'POST',
                headers: {
                  'Authorization': `Bearer ${process.env.SLACK_BOT_TOKEN}`,
                  'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                  channel: process.env.SLACK_CHANNEL_ID,
                  thread_ts: threadTs,
                  text: slackMessage,
                }),
              });

              const buildData = await buildResponse.json();
              console.log('Slack build response:', JSON.stringify(buildData, null, 2));

              if (!buildData.ok) {
                console.error('Failed to post build info:', buildData.error);
              }
            } else {
              console.error('No valid thread timestamp available');
            }
